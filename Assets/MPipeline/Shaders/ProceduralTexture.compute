// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpSample
Texture2D<float> _SourceTex;
Texture2DArray<float4> _MainTex; SamplerState sampler_MainTex;
RWTexture2D<float4> _DestTex;
float4 _TextureSize;
[numthreads(8,8,1)]
void UpSample (uint2 id : SV_DispatchThreadID)
{
    //_TextureSize.xy: _SourceTex's size        _TextureSize.zw:  _DestTex's size
    float2 destUV = (id + 0.5) / _TextureSize.zw;
    float2 sourcePixelUV = destUV * (_TextureSize.xy - 1) + 1;
    float2 sourcePixelUVAdded = sourcePixelUV + 0.5;
    float2 sourcePixelUVMinus = sourcePixelUV - 0.5;
    float2 low = float2(_SourceTex[sourcePixelUVMinus], _SourceTex[float2(sourcePixelUVAdded.x, sourcePixelUVMinus.y)]);
    low = low * 8 + 0.1;
    float2 up = float2( _SourceTex[float2(sourcePixelUVMinus.x, sourcePixelUVAdded.y)], _SourceTex[sourcePixelUVAdded]);
    up = up * 8 + 0.1;
    float4 leftDown = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, low.x), 0);
    float4 rightDown = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, low.y), 0);
    float4 leftUp = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, up.x), 0);
    float4 rightUp = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, up.y), 0);
    sourcePixelUVAdded = frac(sourcePixelUVAdded);
    leftDown = lerp(leftDown, rightDown, sourcePixelUVAdded.x);
    leftUp = lerp(leftUp, rightUp, sourcePixelUVAdded.x);
    _DestTex[id] = lerp(leftDown, leftUp, sourcePixelUVAdded.y);
}
