// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GetDepth
#pragma kernel DrawMask
#include "UnityCG.cginc"

RWStructuredBuffer<float> _DistanceBuffer;
float2 _UV;
Texture2D<float> _CameraDepthTexture; SamplerState sampler_CameraDepthTexture;
[numthreads(1,1,1)]
void GetDepth (uint3 id : SV_DispatchThreadID)
{
    _DistanceBuffer[id.x] = _CameraDepthTexture.SampleLevel(sampler_CameraDepthTexture, _UV, 0);
}

RWTexture2DArray<float> _DestTex;
float4 _SrcDestCorner;
uint _Count;
uint _OffsetIndex;
float3 _Circle0;
float3 _Circle1;
float4x4 _QuadMatrix;
float _TargetValue;

#define DETECT_PAINT(pos, result) \
float pos##_ToFirstCircle = distance(pos, _Circle0.xy) < _Circle0.z;\
float pos##_ToSecondCircle = distance(pos, _Circle1.xy) < _Circle1.z;\
float2 pos##_localQuadPos = mul((float3x3)_QuadMatrix, float3(pos, 1)).xy + 0.5;\
float pos##_inQuad = dot(abs(pos##_localQuadPos - saturate(pos##_localQuadPos)), 1) < 1e-4;\
result = pos##_ToFirstCircle + pos##_ToSecondCircle + pos##_inQuad * _QuadMatrix[2][2];

[numthreads(8,8,1)]
void DrawMask(uint2 id : SV_DISPATCHTHREADID)
{
    float2 uv = (id + 0.5) / _Count;
    float2 centerPos = lerp(_SrcDestCorner.xy, _SrcDestCorner.zw, uv);
    float result;
    DETECT_PAINT(centerPos, result)
    if(result > 0.5)
        _DestTex[uint3(id, _OffsetIndex)] = _TargetValue;
    
}