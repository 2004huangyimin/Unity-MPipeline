// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpSample
#pragma kernel NormalToTex
#pragma kernel ClearColorTex
#include "UnityCG.cginc"
#include "../CGINC/VirtualTexture.cginc"
Texture2DArray<float4> _MainTex; SamplerState sampler_MainTex;
Texture2DArray<float2> _BumpMap; SamplerState sampler_BumpMap;
Texture2DArray<float4> _SMMap; SamplerState sampler_SMMap;
Texture2DArray<float> _VirtualMaskmap; SamplerState sampler_VirtualMaskmap;
Texture2D<float4> _MaskIndexMap;
RWTexture2DArray<float4> _VirtualMainTex;
RWTexture2DArray<float2> _VirtualBumpMap;
RWTexture2DArray<float4> _VirtualSMO;
float4 _TextureSize;
float4 _IndexTextureSize;//X: 1 / mask pixel  Y: arrayCount
float4 _IndexBuffer;
uint _Count;
uint _OffsetIndex;
[numthreads(8,8,1)]
void UpSample (uint2 id : SV_DispatchThreadID)
{
    //_TextureSize   x:mask scale,  yz: mask offset   w: chunk scale
    float2 absoluteUV = (id + 0.5) / _Count;
    //absoluteUV.y = 1 - absoluteUV.y;
    float2 maskVirtualUV = absoluteUV * _TextureSize.x + _TextureSize.yz;
    float2 uv = absoluteUV * _TextureSize.w;
    float3 maskUV = GetVirtualTextureUV(_MaskIndexMap, _IndexTextureSize, _IndexBuffer.xy, maskVirtualUV);
    float mask = _VirtualMaskmap.SampleLevel(sampler_VirtualMaskmap, maskUV, 0);
    mask *= _IndexTextureSize.y;
    _VirtualMainTex[uint3(id, _OffsetIndex)] = _MainTex.SampleLevel(sampler_MainTex, float3(uv,mask), 0);
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = _BumpMap.SampleLevel(sampler_BumpMap, float3(uv,mask), 0);
    _VirtualSMO[uint3(id, _OffsetIndex)] = _SMMap.SampleLevel(sampler_SMMap, float3(uv,mask), 0);
}
Texture2D<float4> _TerrainMainTexArray;
Texture2D<float4> _TerrainBumpMapArray;
Texture2D<float4> _TerrainSMTexArray;
[numthreads(8, 8, 1)]
void NormalToTex (uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = UnpackNormal(_TerrainBumpMapArray[id]).xy;
    float3 smo = _TerrainSMTexArray[id].xyz;
    float3 albedo = _TerrainMainTexArray[id].xyz;
    _VirtualMainTex[idx] = float4(albedo, smo.z);
    _VirtualSMO[idx] = float4(smo.xy, 0, 0);
}

[numthreads(8,8,1)]
void ClearColorTex(uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = 0;
    _VirtualMainTex[idx] = 1;
    _VirtualSMO[idx] = 1;
}
