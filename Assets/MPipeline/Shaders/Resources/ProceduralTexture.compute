// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpSample
#pragma kernel NormalToTex
#pragma kernel ClearColorTex
#pragma kernel HeightToNormal
#pragma kernel NormalToWorld
#pragma kernel GenerateMipmap
#pragma kernel GenerateRandomTileMap
#pragma kernel ReadNormal
#include "UnityCG.cginc"
#include "../CGINC/VirtualTexture.cginc"
#include "../CGINC/HeightBlendMaterial.cginc"
//Texture2D<float> _NoiseTexture; SamplerState sampler_NoiseTexture;
Texture2DArray<float> _VirtualMaskmap; SamplerState sampler_VirtualMaskmap;
Texture2D<float4> _MaskIndexMap;
RWTexture2DArray<float4> _VirtualMainTex;
RWTexture2DArray<float2> _VirtualBumpMap;
RWTexture2DArray<float4> _VirtualSMO;
RWTexture2DArray<float> _VirtualDisplacement;
//RWTexture2DArray<float> _MaskTex;

Texture2D<float4> _SourceTex; SamplerState sampler_SourceTex;
RWTexture2D<float4> _DestTex;
float4 _TextureSize;
float4 _IndexTextureSize;//X: mask pixel  Y: arrayCount
float4 _IndexBuffer;
uint _OffsetIndex;
uint _HeightResolution;
uint _ColorResolution;
uint _Count;

inline float SampleMask(float2 uv)
{
    float3 realUV = GetVirtualTextureUV(_MaskIndexMap, _IndexTextureSize, floor(_IndexBuffer.xy + uv), frac(uv));
    return _VirtualMaskmap.SampleLevel(sampler_VirtualMaskmap, realUV, 0);
}
float2 BilinearSampleMask(float2 uv, out float4 result, float2 noise)
{
    float2 pixelLength = 1.0 / _IndexTextureSize.x;
    uv += noise * pixelLength * 3;
    float2 absoluteUV = frac(uv.xy * _IndexTextureSize.x);
    
    //uv.xy -= absoluteUV > 0.5 ? 0 : pixelLength;
    float2 lerpValue = absoluteUV - 0.5;
    pixelLength *= (lerpValue < 0) ? -1 : 1;
    lerpValue = abs(lerpValue);
    result = float4(
       SampleMask(uv),
       SampleMask(uv + float2(pixelLength.x, 0)),
        SampleMask(uv + float2(0, pixelLength.y)),
       SampleMask(uv + pixelLength)
    );
    return lerpValue;
}

#define BILINEAR_INTERPOLATION(Type, ValueArray, lerpValue, Result)\
    Type Result##_leftValue = lerp(ValueArray##[0], ValueArray##[2], lerpValue##.y);\
    Type Result##_rightValue = lerp(ValueArray##[1], ValueArray##[3], lerpValue##.y);\
    Result = lerp(Result##_leftValue, Result##_rightValue, lerpValue##.x);

[numthreads(8,8,1)]
void UpSample (uint2 id : SV_DispatchThreadID)
{
    //_TextureSize   x:mask scale,  yz: mask offset   w: chunk scale
    float2 absoluteUV = (id + 0.5) / _ColorResolution;
    //absoluteUV.y = 1 - absoluteUV.y;
    float2 maskVirtualUV = absoluteUV * _TextureSize.x + _TextureSize.yz;
    float2 uv = absoluteUV * _TextureSize.w;
    float4 mask;
        float lod = log2(_TextureSize.w);
    float2 noiseValue = _NoiseTexture.SampleLevel(sampler_NoiseTexture, (_Offset.xy + uv) * 0.25, 0).xy  - 0.5;
    float2 lerpValue = BilinearSampleMask(maskVirtualUV, mask, noiseValue);
    mask *= _IndexTextureSize.y;
    mask += 0.4;
    float4 albedo_occs[4];
    float2 normals[4];
    float2 sms[4];
    GetHeightBlendMaterial(mask.x, uv, lod, noiseValue, albedo_occs[0], normals[0], sms[0]);
    GetHeightBlendMaterial(mask.y, uv, lod, noiseValue, albedo_occs[1], normals[1], sms[1]);
    GetHeightBlendMaterial(mask.z, uv, lod, noiseValue, albedo_occs[2], normals[2], sms[2]);
    GetHeightBlendMaterial(mask.w, uv, lod, noiseValue, albedo_occs[3], normals[3], sms[3]);
    float4 albedo_occ;
    float2 normal;
    float2 sm;
   // lerpValue = lerpValue > 0.5 ? 1 : 0;
    BILINEAR_INTERPOLATION(float4, albedo_occs, lerpValue, albedo_occ)
    BILINEAR_INTERPOLATION(float2, normals, lerpValue, normal)
    BILINEAR_INTERPOLATION(float2, sms, lerpValue, sm)
    _VirtualMainTex[uint3(id, _OffsetIndex)] = albedo_occ;
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = normal;
    _VirtualSMO[uint3(id, _OffsetIndex)] = float4(sm, 1, 1);
}
Texture2D<float4> _TerrainMainTexArray;
Texture2D<float4> _TerrainBumpMapArray;
Texture2D<float4> _TerrainSMTexArray;
[numthreads(8, 8, 1)]
void NormalToTex (uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = UnpackNormal(_TerrainBumpMapArray[id]).xy;
    float4 smo = _TerrainSMTexArray[id];
    float3 albedo = _TerrainMainTexArray[id].xyz;
    _VirtualMainTex[idx] = float4(albedo, smo.z);
    _VirtualSMO[idx] = float4(smo.xy, 0, 0);
   // _MaskTex[idx] = smo.w;
}

[numthreads(8,8,1)]
void ClearColorTex(uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = 0;
    _VirtualMainTex[idx] = 1;
    _VirtualSMO[idx] = 1;
   // _MaskTex[idx] = 1;
}
Texture2DArray<float> _VirtualHeightmap; SamplerState sampler_VirtualHeightmap;
Texture2D<float4> _IndexTexture;
#include "../CGINC/VirtualTexture.cginc"
//_IndexTextureSize:  XY: 1/Texture size   ZW: Index Texture size
//_TextureSize   Same as kernel 0
//_IndexBuffer Same as kernel 0
//_IndexTexture Heightmap indextex
[numthreads(8,8,1)]
void HeightToNormal(uint2 id : SV_DISPATCHTHREADID)
{
    if(id.x >= _Count || id.y >= _Count) return;
    float2 absoluteUV = (id - 0.5) / _ColorResolution;
    float2 maskVirtualUV = absoluteUV * _TextureSize.x + _TextureSize.yz;
    float3 bilinearUVs[4]; float2 bilinearWeight;
    GetBilinearVirtualTextureUV(_IndexTexture, _IndexTextureSize, _IndexBuffer.xy, maskVirtualUV, float2(1.0/_HeightResolution, _HeightResolution).xxyy, bilinearUVs, bilinearWeight);
    float4 heights =float4(_VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[0], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[1], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[2], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[3], 0));
    heights.xy = lerp(heights.xy, heights.zw, bilinearWeight.y);
    heights.x = lerp(heights.x, heights.y, bilinearWeight.x);
    _DestTex[id] = heights.x;
}

[numthreads(8,8,1)]
void NormalToWorld(uint2 id : SV_DISPATCHTHREADID)
{
    //_IndexBuffer : zw:  height scale
    const int2 uvOffset[9] = 
    {
        int2(0, 0),
        int2(1, 1),
        int2(1, 0),
        int2(1, -1),
        int2(0, 1),
        int2(0, -1),
        int2(-1, 1),
        int2(-1, 0),
        int2(-1, -1)
    };
    float heights[9];
    [unroll]
    for(uint i = 0; i < 9; ++i)
    {
        heights[i] = _SourceTex[id + uvOffset[i] + int2(1,1)].x;
    }
    float3 normalSum = 0;
   
    [unroll]
    for(i = 1; i < 9; ++i)
    {
        float3 horizonVec = float3(uvOffset[i].x, 0, uvOffset[i].y);
        float horizonLen = length(horizonVec);
        float heightDiff = (heights[i] - heights[0]) * _IndexBuffer.z * _IndexBuffer.w * horizonLen;
        horizonVec /= horizonLen;
        float3 tangent = cross(float3(0,1,0),horizonVec);
        float3 normal = normalize(cross(float3(uvOffset[i].x, heightDiff, uvOffset[i].y), tangent));
        normalSum += normal;
    }
    normalSum = normalize(normalSum);
    float2 absoluteUV = (id + 0.5) / _ColorResolution;
    float2 tangentNormalXY = _VirtualBumpMap[uint3(id, _OffsetIndex)].xy;
    float3 tangentNormal = float3(tangentNormalXY, sqrt(1 - dot(tangentNormalXY, tangentNormalXY)));
    float3 tangent = float3(1,0,0);
    float3 binormal = normalize(cross(tangent, normalSum));
    tangent = normalize(cross(normalSum, binormal));
    float3x3 TBN = float3x3(tangent, binormal, normalSum);
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = normalize(mul(tangentNormal, TBN)).xz;
}


inline uint2 GetDispatchID(uint2 groupID, uint2 threadID, uint2 threadCount)
{
    return groupID * threadCount + threadID;
}

#define CALCULATE_MIP(LastMip, NextMip, groupLength) \
if(threadID.x < groupLength.x && threadID.y < groupLength.y){ \
id = GetDispatchID(groupID, threadID, groupLength);\
idx = id * 2;\
NextMip[uint3(id, _OffsetIndex)] = 0.25 * (LastMip[uint3(idx, _OffsetIndex)] + LastMip[uint3(idx + uint2(0, 1), _OffsetIndex)] + LastMip[uint3(idx + uint2(1, 1), _OffsetIndex)] + LastMip[uint3(idx + uint2(1, 0), _OffsetIndex)]); \
} 

#define GROUP_SYNC(groupLength) \
groupLength /= 2;\
AllMemoryBarrierWithGroupSync();\

RWTexture2DArray<float4> _Mip0;
RWTexture2DArray<float4> _Mip1;
[numthreads(8, 8, 1)]
void GenerateMipmap(uint2 id : SV_DISPATCHTHREADID)
{
    uint2 idx = id * 2;
    _Mip1[uint3(id, _OffsetIndex)] = 
    (_Mip0[uint3(idx, _OffsetIndex)] + _Mip0[uint3(idx + uint2(0,1), _OffsetIndex)] + _Mip0[uint3(idx + uint2(1,0), _OffsetIndex)] + _Mip0[uint3(idx + 1, _OffsetIndex)]) * 0.25;
}
#include "../CGINC/Random.cginc"
//_TextureSize: XY: Full Texture Size
[numthreads(8,8,1)]
void GenerateRandomTileMap(uint2 id : SV_DISPATCHTHREADID)
{
    float2 randomSeed = MNoise((id + 0.5) * _TextureSize.xy);
    float2 allWaitingRandoms[16];
    int a = 0;
    [loop]
    for(int i = 0; i < 4; ++i)
    {
        [loop]
        for(int j = 0; j < 4; ++j)
        {
            allWaitingRandoms[a] = float2(i, j) / 4.0;
            ++a;
        }
    }
    [loop]
    for(a = 15; a >= 0; a--)
    {
        randomSeed = static_MNoise(randomSeed);
        uint currentIndex = uint(frac(randomSeed.x + randomSeed.y) * a + 1e-4);
        float2 temp = allWaitingRandoms[a];
        allWaitingRandoms[a] = allWaitingRandoms[currentIndex];
        allWaitingRandoms[currentIndex] = temp;
    }
    const float4 offsets[4] = {
        float4(0,0,1,1),
        float4(0,0.25, -1,1),
        float4(0.25, 0, 1, -1),
        float4(0.25,0.25,-1,-1)
    };
    a = 0;
    [loop]
    for(int i = 0; i < 4; ++i)
    {
        [loop]
        for(int j = 0; j < 4; ++j)
        {
            randomSeed = static_MNoise(randomSeed);
            uint currentIndex = uint(frac(randomSeed.x + randomSeed.y) * 4 + 1e-4);
            _DestTex[id * 4 + uint2(i,j)] = float4(allWaitingRandoms[a] + offsets[currentIndex].xy, offsets[currentIndex].zw);
            ++a;
        }
    }
}

[numthreads(8,8,1)]
void ReadNormal(uint2 id : SV_DISPATCHTHREADID)
{
    float2 absoluteUV = (id + 0.5) / _Count;
    float2 maskVirtualUV = absoluteUV * _TextureSize.x + _TextureSize.yz;
     float3 bilinearUVs[4]; float2 bilinearWeight;
    GetBilinearVirtualTextureUV(_IndexTexture, _IndexTextureSize, _IndexBuffer.xy, maskVirtualUV, float2(1.0/_HeightResolution, _HeightResolution).xxyy, bilinearUVs, bilinearWeight);
    float4 heights =float4(_VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[0], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[1], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[2], 0),
                            _VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, bilinearUVs[3], 0));
    heights.xy = lerp(heights.xy, heights.zw, bilinearWeight.y);
    heights.x = lerp(heights.x, heights.y, bilinearWeight.x);
    _VirtualDisplacement[uint3(id, _OffsetIndex)] = heights.x;
}
