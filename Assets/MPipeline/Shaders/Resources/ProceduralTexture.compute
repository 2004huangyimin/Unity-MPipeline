// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpSample
#pragma kernel NormalToTex
#pragma kernel ClearColorTex
#pragma kernel HeightToNormal
#pragma kernel NormalToWorld
#include "UnityCG.cginc"
#include "../CGINC/VirtualTexture.cginc"
#include "../CGINC/HeightBlendMaterial.cginc"
Texture2D<float> _NoiseTexture; SamplerState sampler_NoiseTexture;
Texture2DArray<float> _VirtualMaskmap; SamplerState sampler_VirtualMaskmap;
Texture2D<float4> _MaskIndexMap;
RWTexture2DArray<float4> _VirtualMainTex;
RWTexture2DArray<float2> _VirtualBumpMap;
RWTexture2DArray<float4> _VirtualSMO;
RWTexture2DArray<float> _MaskTex;

Texture2D<float4> _SourceTex; SamplerState sampler_SourceTex;
RWTexture2D<float4> _DestTex;
float4 _TextureSize;
float4 _IndexTextureSize;//X: mask pixel  Y: arrayCount
float4 _IndexBuffer;
uint _OffsetIndex;
uint _HeightResolution;
uint _ColorResolution;

inline float SampleMask(float2 uv)
{
    float3 realUV = GetVirtualTextureUV(_MaskIndexMap, _IndexTextureSize, _IndexBuffer.xy + floor(uv), frac(uv));
    return _VirtualMaskmap.SampleLevel(sampler_VirtualMaskmap, realUV, 0);
}
float2 BilinearSampleMask(float2 uv, out float4 result)
{
    float2 absoluteUV = uv.xy * _IndexTextureSize.x;
    float pixelLength = 1.0 / _IndexTextureSize.x;
    uv.xy -= frac(absoluteUV) > 0.5 ? 0 : pixelLength;
    float2 lastUV = absoluteUV - 0.5;
    float2 lerpValue = frac(absoluteUV + 0.5);
    result = float4(
       SampleMask(uv),
       SampleMask(uv + float2(pixelLength, 0)),
        SampleMask(uv + float2(0, pixelLength)),
       SampleMask(uv + pixelLength)
    );
    return lerpValue;
}

#define BILINEAR_INTERPOLATION(Type, ValueArray, lerpValue, Result)\
    Type Result##_leftValue = lerp(ValueArray##[0], ValueArray##[2], lerpValue##.y);\
    Type Result##_rightValue = lerp(ValueArray##[1], ValueArray##[3], lerpValue##.y);\
    Result = lerp(Result##_leftValue, Result##_rightValue, lerpValue##.x);

[numthreads(8,8,1)]
void UpSample (uint2 id : SV_DispatchThreadID)
{
    //_TextureSize   x:mask scale,  yz: mask offset   w: chunk scale
    float2 absoluteUV = (id + 0.5) / _ColorResolution;
    //absoluteUV.y = 1 - absoluteUV.y;
    float2 maskVirtualUV = absoluteUV * _TextureSize.x + _TextureSize.yz;
    float2 uv = absoluteUV * _TextureSize.w;
    float4 mask;
    float2 lerpValue = BilinearSampleMask(maskVirtualUV, mask);
    float noiseValue = _NoiseTexture.SampleLevel(sampler_NoiseTexture, maskVirtualUV, 0);
    lerpValue = pow(lerpValue, max(1e-4, 0.5 + 3 * noiseValue));
    mask *= _IndexTextureSize.y;
    mask += 0.4;
    float4 albedo_occs[4];
    float2 normals[4];
    float2 sms[4];
    GetHeightBlendMaterial(mask.x, uv, albedo_occs[0], normals[0], sms[0]);
    GetHeightBlendMaterial(mask.y, uv, albedo_occs[1], normals[1], sms[1]);
    GetHeightBlendMaterial(mask.z, uv, albedo_occs[2], normals[2], sms[2]);
    GetHeightBlendMaterial(mask.w, uv, albedo_occs[3], normals[3], sms[3]);
    float4 albedo_occ;
    float2 normal;
    float2 sm;
    BILINEAR_INTERPOLATION(float4, albedo_occs, lerpValue, albedo_occ)
    BILINEAR_INTERPOLATION(float2, normals, lerpValue, normal)
    BILINEAR_INTERPOLATION(float2, sms, lerpValue, sm)
    _VirtualMainTex[uint3(id, _OffsetIndex)] = albedo_occ;
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = normal;
    _VirtualSMO[uint3(id, _OffsetIndex)] = float4(sm, 1, 1);
}
Texture2D<float4> _TerrainMainTexArray;
Texture2D<float4> _TerrainBumpMapArray;
Texture2D<float4> _TerrainSMTexArray;
[numthreads(8, 8, 1)]
void NormalToTex (uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = UnpackNormal(_TerrainBumpMapArray[id]).xy;
    float4 smo = _TerrainSMTexArray[id];
    float3 albedo = _TerrainMainTexArray[id].xyz;
    _VirtualMainTex[idx] = float4(albedo, smo.z);
    _VirtualSMO[idx] = float4(smo.xy, 0, 0);
    _MaskTex[idx] = smo.w;
}

[numthreads(8,8,1)]
void ClearColorTex(uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = 0;
    _VirtualMainTex[idx] = 1;
    _VirtualSMO[idx] = 1;
    _MaskTex[idx] = 1;
}
Texture2DArray<float> _VirtualHeightmap; SamplerState sampler_VirtualHeightmap;
Texture2D<float4> _IndexTexture;

//_IndexTextureSize:  XY: 1/Texture size   ZW: Index Texture size
//_IndexBuffer:   XY: chunk virtual index    Z: height rate
[numthreads(8,8,1)]
void HeightToNormal(uint2 id : SV_DISPATCHTHREADID)
{
    float2 uv = (id + 0.5) * _IndexTextureSize.xy;
    //float3 virtualUV = GetVirtualTextureUV(_MaskIndexMap, _IndexTextureSize, _IndexBuffer.xy, uv);
    float2 uvOffset[9] = 
    {
        float2(0, 0),
        float2(1, 1),
        float2(1, 0),
        float2(1, -1),
        float2(0, 1),
        float2(0, -1),
        float2(-1, 1),
        float2(-1, 0),
        float2(-1, -1)
    };
    float heights[9];
    [unroll]
    for(uint i = 0; i < 9; ++i)
    {
        float2 currentUV = uv + uvOffset[i] * _IndexTextureSize.xy;
        heights[i] =_VirtualHeightmap.SampleLevel(sampler_VirtualHeightmap, GetVirtualTextureUV(_IndexTexture, _IndexTextureSize, _IndexBuffer.xy + floor(currentUV), frac(currentUV)), 0);
    }
    float3 normalSum = 0;
    [unroll]
    for(i = 1; i < 9; ++i)
    {
        float heightDiff = (heights[i] - heights[0]) * _IndexBuffer.z * _IndexBuffer.w;
        float3 tangent = normalize(cross(float3(0,1,0), normalize(float3(uvOffset[i].x, 0, uvOffset[i].y))));
        float3 normal = normalize(cross(normalize(float3(uvOffset[i].x, heightDiff, uvOffset[i].y)), tangent));
        normalSum += normal;
    }
    normalSum = normalize(normalSum);
    _DestTex[id] = float4(normalSum.xz, 1, 1);
}

[numthreads(8,8,1)]
void NormalToWorld(uint2 id : SV_DISPATCHTHREADID)
{
    float2 absoluteUV = (id + 0.5) / _ColorResolution;
    float2 tangentNormalXY = _VirtualBumpMap[uint3(id, _OffsetIndex)].xy;
    float3 tangentNormal = float3(tangentNormalXY, sqrt(1 - dot(tangentNormalXY, tangentNormalXY)));
    float3 worldNormal;
    worldNormal.xz = _SourceTex.SampleLevel(sampler_SourceTex, absoluteUV, 0).xy;
    worldNormal.y = sqrt(1 - dot(worldNormal.xz, worldNormal.xz));
    float3 tangent = float3(1,0,0);
    float3 binormal = normalize(cross(tangent, worldNormal));
    tangent = normalize(cross(worldNormal, binormal));
    float3x3 TBN = float3x3(tangent, binormal, worldNormal);
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = normalize(mul(tangentNormal, TBN)).xz;
}