// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel UpSample
#pragma kernel NormalToTex
#pragma kernel ClearColorTex
#include "UnityCG.cginc"
Texture2D<float> _SourceTex;
Texture2DArray<float4> _MainTex; SamplerState sampler_MainTex;
Texture2DArray<float2> _BumpMap; SamplerState sampler_BumpMap;
Texture2DArray<float4> _SMMap; SamplerState sampler_SMMap;
RWTexture2DArray<float4> _VirtualMainTex;
RWTexture2DArray<float2> _VirtualBumpMap;
RWTexture2DArray<float4> _VirtualSMO;
float4 _TextureSize;
uint _Count;
uint _OffsetIndex;
[numthreads(8,8,1)]
void UpSample (uint2 id : SV_DispatchThreadID)
{
    //_TextureSize.xy: _SourceTex's size        _TextureSize.zw:  _VirtualMainTex's size
    float2 destUV = (id + 0.5) / _TextureSize.zw;
    float2 sourcePixelUV = destUV * (_TextureSize.xy - 1) + 1;
    float2 sourcePixelUVAdded = sourcePixelUV + 0.5;
    float2 sourcePixelUVMinus = sourcePixelUV - 0.5;
    float2 low = float2(_SourceTex[sourcePixelUVMinus], _SourceTex[float2(sourcePixelUVAdded.x, sourcePixelUVMinus.y)]);
    low = low * _Count + 0.1;
    float2 up = float2( _SourceTex[float2(sourcePixelUVMinus.x, sourcePixelUVAdded.y)], _SourceTex[sourcePixelUVAdded]);
    up = up * _Count + 0.1;
    sourcePixelUVAdded = frac(sourcePixelUVAdded);
    float4 leftDown = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, low.x), 0);
    float4 rightDown = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, low.y), 0);
    float4 leftUp = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, up.x), 0);
    float4 rightUp = _MainTex.SampleLevel(sampler_MainTex, float3(destUV, up.y), 0);
    leftDown = lerp(leftDown, rightDown, sourcePixelUVAdded.x);
    leftUp = lerp(leftUp, rightUp, sourcePixelUVAdded.x);
    _VirtualMainTex[uint3(id, _OffsetIndex)] = lerp(leftDown, leftUp, sourcePixelUVAdded.y);

    leftDown.xy = _BumpMap.SampleLevel(sampler_BumpMap, float3(destUV, low.x), 0);
    rightDown.xy = _BumpMap.SampleLevel(sampler_BumpMap, float3(destUV, low.y), 0);
    leftUp.xy = _BumpMap.SampleLevel(sampler_BumpMap, float3(destUV, up.x), 0);
    rightUp.xy = _BumpMap.SampleLevel(sampler_BumpMap, float3(destUV, up.y), 0);
    leftDown.xy = lerp(leftDown.xy, rightDown.xy, sourcePixelUVAdded.x);
    leftUp.xy = lerp(leftUp.xy, rightUp.xy, sourcePixelUVAdded.x);
    _VirtualBumpMap[uint3(id, _OffsetIndex)] = lerp(leftDown.xy, leftUp.xy, sourcePixelUVAdded.y);
    leftDown = _SMMap.SampleLevel(sampler_SMMap, float3(destUV, low.x), 0);
    rightDown = _SMMap.SampleLevel(sampler_SMMap, float3(destUV, low.y), 0);
    leftUp = _SMMap.SampleLevel(sampler_SMMap, float3(destUV, up.x), 0);
    rightUp = _SMMap.SampleLevel(sampler_SMMap, float3(destUV, up.y), 0);
    leftDown = lerp(leftDown, rightDown, sourcePixelUVAdded.x);
    leftUp = lerp(leftUp, rightUp, sourcePixelUVAdded.x);
    _VirtualSMO[uint3(id, _OffsetIndex)] = lerp(leftDown, leftUp, sourcePixelUVAdded.y);
}
Texture2D<float4> _TerrainMainTexArray;
Texture2D<float4> _TerrainBumpMapArray;
Texture2D<float4> _TerrainSMTexArray;
[numthreads(8, 8, 1)]
void NormalToTex (uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = UnpackNormal(_TerrainBumpMapArray[id]).xy;
    float3 smo = _TerrainSMTexArray[id].xyz;
    float3 albedo = _TerrainMainTexArray[id].xyz;
    _VirtualMainTex[idx] = float4(albedo, smo.z);
    _VirtualSMO[idx] = float4(smo.xy, 0, 0);
}

[numthreads(8,8,1)]
void ClearColorTex(uint2 id : SV_DISPATCHTHREADID)
{
    uint3 idx = uint3(id, _OffsetIndex);
    _VirtualBumpMap[idx] = 0;
    _VirtualMainTex[idx] = 1;
    _VirtualSMO[idx] = 1;
}
