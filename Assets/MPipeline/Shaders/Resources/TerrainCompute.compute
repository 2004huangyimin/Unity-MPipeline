#pragma kernel Cull
#pragma kernel Clear
#pragma kernel DecodeR8
#include "../CGINC/Plane.cginc"
uint _Count;
float3 _StartPos;
float4 planes[6];
float2 _HeightScaleOffset;//X: scale Y: offset
float3 _FrustumMaxPoint;
float3 _FrustumMinPoint;
RWTexture2D<float> _CullingTexture;
[numthreads(8, 8, 1)]
void Cull(uint2 id : SV_DISPATCHTHREADID)
{
    float2 uv = (id + 0.5) / _Count;
    float heightScale = 0.5 * _HeightScaleOffset.x;
    float3 pos = float3(_StartPos.xy + _StartPos.z * id, _HeightScaleOffset.y + heightScale);
    pos.xyz = pos.xzy;
    float3 extent = float3(_StartPos.z, heightScale, _StartPos.z);
    extent.xz *= 0.5;
    pos.xz += extent.xz;
    float3 chunkMinPos = pos - extent;
    float3 chunkMaxPos = pos + extent;
    float result = dot(chunkMinPos > _FrustumMaxPoint, 1) + dot(chunkMaxPos < _FrustumMinPoint, 1);
    //TODO
    if(/*result < 0.5 &&*/ BoxIntersect(extent, pos, planes) > 0.5)
    {
       _CullingTexture[id] = 1;
    }
    else
    {
        _CullingTexture[id] = 0;
    }
    
}

[numthreads(1, 1, 1)]
void Clear(uint id : SV_DISPATCHTHREADID)
{
}
RWTexture2D<float> _MainTex;
StructuredBuffer<uint> _TextureBuffer; 
RWTexture2DArray<float> _VirtualHeightmap;
uint _OffsetIndex;
uint _HeightResolution;
[numthreads(8,8,1)]
void DecodeR8(uint2 id : SV_DISPATCHTHREADID)
{
    uint index = id.y * _HeightResolution + id.x;
    uint value = _TextureBuffer[index / 4];
    value >>= (index % 4) * 8;
    value &= 255;
    _MainTex[id] = value / 255.0;
}

